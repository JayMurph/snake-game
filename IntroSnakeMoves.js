function move (x, y){
    this.x = x;
    this.y = y;
    return {x: this.x, y: this.y};
}
var intro_snake_moves = [
    //DRAW S
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(0, 1),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(-1, 0),
    move(-1, 0),
    move(-1, 0),
    move(-1, 0),
    move(-1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(0, 1),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(0, -1),
    // DRAW N
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    // DRAW A
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(1, 0),
    //
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1,0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    // DRAW K 
    move(1, 0),
    move(1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(1, 0),
    move(-1, 0),
    //
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(-1, 0),
    move(0, -1),
    move(0, -1),
    move(-1, 0),
    move(0, -1),
    move(0, -1),
    move(-1, 0),
    move(-1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    //
    move(1, 0),
    move(1, 0),
    //
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    move(0, -1),
    move(0, -1),
    move(0, -1),
    move(1, 0),
    // DRAW E
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    //flare
    move(0, 1),
    move(1, 0),
    move(-1, 0),
    move(0, -1),
    move(-1, 0),
    move(-1, 0),
    move(-1, 0),
    move(-1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    //
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    //flare
    move(0, 1),
    move(1, 0),
    move(-1, 0),
    move(0, -1),
    move(-1, 0),
    move(-1, 0),
    move(-1, 0),
    move(-1, 0),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    move(0, 1),
    //
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(1, 0),
    move(0, 1),
    move(1, 0),
    move(1, 0),
]